--ex.1
CREATE TABLE Persons
(
PersonID INT PRIMARY KEY IDENTITY NOT NULL,
FirstName NVARCHAR(50) NOT NULL,
Salary DECIMAL(18,2),
PassportID INT UNIQUE NOT NULL
)
CREATE TABLE Passports 
(
PassportID INT PRIMARY KEY IDENTITY(101, 1) NOT NULL,
PassportNumber NVARCHAR(50) NOT NULL
)

INSERT INTO Persons(FirstName, Salary, PassportID)
VALUES
('Roberto', 43300.00, 102),
('Tom', 56100.00, 103),
('Yana', 60200.00, 101)

INSERT INTO Passports(PassportNumber)
VALUES
('N34FG21B'),
('K65LO4R7'),
('ZE657QP2')

ALTER TABLE Persons
ADD CONSTRAINT FK_Persons_Passports
FOREIGN  KEY (PassportID)
REFERENCES Passports(PassportID)

--ex.2
CREATE TABLE Manufacturers
(
ManufacturerID INT PRIMARY KEY IDENTITY NOT NULL,
[Name]	VARCHAR(50) NOT NULL,
EstablishedOn DATE NOT NULL
)

CREATE TABLE Models
(
ModelID INT PRIMARY KEY IDENTITY(101,1) NOT NULL,
[Name] VARCHAR(50) NOT NULL,
ManufacturerID INT NOT NULL
)

INSERT INTO Models([Name], ManufacturerID)
VALUES
('X1', 1),
('i6', 1),
('Model S', 2),
('Model X', 2),
('Model 3', 2),
('Nova', 3)

INSERT INTO Manufacturers([Name], EstablishedOn)
VALUES
('BMW', '07/03/1916'),
('Tesls', '01/01/2003'),
('Lada', '01/05/1966')

ALTER TABLE Models
ADD CONSTRAINT FK_Models_Manufacturers
FOREIGN KEY (ManufacturerID)
REFERENCES Manufacturers(ManufacturerID)

--ex.3
CREATE TABLE Students
(
StudentID INT PRIMARY KEY IDENTITY NOT NULL,
[Name] VARCHAR(50)
)

CREATE TABLE Exams
(
ExamID INT PRIMARY KEY IDENTITY(101,1) NOT NULL,
[Name] VARCHAR(50)
)
CREATE TABLE StudentsExams
(
StudentID INT NOT NULL,
ExamID INT NOT NULL
)

INSERT INTO Students([Name])
VALUES
('Mila'),
('Toni'),
('Ron')

INSERT INTO Exams([Name])
VALUES
('SpringMVC'),
('Neo4j'),
('Oracle 11g')

INSERT INTO StudentsExams(StudentID, ExamID)
VALUES
(1, 101),
(1, 102),
(2, 101),
(3, 103),
(2, 102),
(2, 103)

ALTER TABLE StudentsExams
ADD CONSTRAINT FK_StudentID_ExamID
PRIMARY KEY (ExamID,StudentID),

CONSTRAINT FK_StudentsExams_Students
FOREIGN KEY (StudentID)
REFERENCES Students(StudentID),

CONSTRAINT FK_StudentsExams_Exams
FOREIGN KEY (ExamID)
REFERENCES Exams(ExamID)

--ex.4
CREATE TABLE Teachers
(
TeacherID INT PRIMARY KEY IDENTITY(101,1) NOT NULL,
[Name] VARCHAR(50) NOT NULL,
ManagerID INT
)
INSERT INTO Teachers([Name], ManagerID)
VALUES
('John', NULL),
('Maya', 106),
('Silvia', 106),
('Ted', 105),
('Mark', 101),
('Greta', 101)

ALTER TABLE Teachers
ADD CONSTRAINT FK_ManagerID_TeacherID
FOREIGN KEY (ManagerID)
REFERENCES Teachers(TeacherID)
--ex.5
CREATE TABLE ItemTypes
(
ItemTypeID INT PRIMARY KEY IDENTITY NOT NULL,
[Name] VARCHAR(50) NOT NULL
)
CREATE TABLE Items
(
ItemID INT PRIMARY KEY IDENTITY NOT NULL,
[Name] VARCHAR(50) NOT NULL,
ItemTypeID INT FOREIGN KEY REFERENCES ItemTypes(ItemTypeID)
)
CREATE TABLE Cities
(
CityID INT PRIMARY KEY IDENTITY NOT NULL,
[Name] VARCHAR(50) NOT NULL
)
CREATE TABLE Customers
(
CustomerID INT PRIMARY KEY IDENTITY NOT NULL,
[Name] VARCHAR(50) NOT NULL,
Birthday DATE NOT NULL,
CitiID INT FOREIGN KEY REFERENCES Cities(CityID)
)
CREATE TABLE Orders
(
OrderID INT PRIMARY KEY IDENTITY NOT NULL,
CustomerID INT FOREIGN KEY REFERENCES Customers(CustomerID)
)
CREATE TABLE OrderItems
(
OrderID INT FOREIGN KEY REFERENCES Orders(OrderID) NOT NULL,
ItemID INT FOREIGN KEY REFERENCES Items(ItemID) NOT NULL,
PRIMARY KEY (OrderID,ItemID)
)
--ex.6
CREATE DATABASE University 
USE University 

CREATE TABLE Majors
(
MajorID INT PRIMARY KEY IDENTITY NOT NULL,
[Name] VARCHAR(50) NOT NULL,
)
CREATE TABLE Students
(
StudentID INT PRIMARY KEY IDENTITY NOT NULL,
StudentNumber INT NOT NULL,
StudentName VARCHAR(50) NOT NULL,
MajorID INT FOREIGN KEY REFERENCES Majors(MajorID)
)
CREATE TABLE Payments
(
PaymentID INT PRIMARY KEY IDENTITY NOT NULL,
PaymentDate DATE NOT NULL,
PaymentAmount DECIMAL(18,2),
StudentID INT FOREIGN KEY REFERENCES Students(StudentID)
)
CREATE TABLE Subjects
(
SubjectID INT PRIMARY KEY IDENTITY NOT NULL,
SubjectName VARCHAR(50) NOT NULL
)
CREATE TABLE Agenda
(
StudentID INT FOREIGN KEY REFERENCES Students(StudentID),
SubjectID INT FOREIGN KEY REFERENCES Subjects(SubjectID)
)
--ex.9
USE Geography

SELECT m.MountainRange,p.PeakName,p.Elevation
FROM Peaks p
JOIN Mountains m ON p.MountainId=m.Id
WHERE m.MountainRange='Rila'
ORDER BY p.Elevation DESC
